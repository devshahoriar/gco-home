generator client {
  provider      = "prisma-client-js"
  output        = "./out"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  type          Role      @default(USER)

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum FileType {
  BLOG_COVER
  USER_PROFILE
}

model File {
  id        Int        @id @default(autoincrement())
  fileId    String
  fileUrl   String
  type      FileType?
  createdAt DateTime   @default(now())
  BlogPost  BlogPost[]
}

model BlogCategory {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  BlogPost  BlogPost[]
}

model BlogPost {
  id           String       @id @default(uuid())
  title        String
  content      String       @db.LongText
  coverImageID Int
  coverImage   File         @relation(fields: [coverImageID], references: [id])
  views        Int          @default(0)
  categoryId   Int
  category     BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  published    Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model FbEmbade {
  id        Int      @id @default(autoincrement())
  piyority  Int?
  embedCode String   @db.LongText
  createdAt DateTime @default(now())
}

model TwEmbade {
  id        Int      @id @default(autoincrement())
  piyority  Int?
  embedCode String   @db.LongText
  createdAt DateTime @default(now())
}
